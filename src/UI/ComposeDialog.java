/*
 * ComposeDialog.java
 *
 * Created on 20 décembre 2008, 9:21
 */
package UI;

import artificialcomposer.*;
import AI.*;
import java.awt.Cursor;
import javax.sound.midi.InvalidMidiDataException;
import javax.sound.midi.MidiUnavailableException;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import java.io.*;

/**
 *
 * @author  William
 */
public class ComposeDialog extends javax.swing.JDialog {

    private mainFrame frm = null;
    private MusicScore[] initPop = null;
    private Ecosystem eco = null;

    /** Creates new form ComposeDialog */
    public ComposeDialog(java.awt.Frame parent, boolean modal, MusicScore[] initPop) {
        super(parent, modal);
        initComponents();
        this.frm = (mainFrame) parent;
        eco = new Ecosystem();
        DefaultListModel mod = new DefaultListModel();
        this.jListPop.setModel(mod);
        this.initPop = initPop;
        this.jListInitPop.setListData(initPop);
        this.jLabelStatus.setText("Etat : Initial, génération 0");
    }

    public void showScore(MusicGenome gen) {
        this.jButtonPlay.setEnabled(true);
        this.jButtonDelete.setEnabled(true);
        this.jButtonSaveFitness.setEnabled(true);
        this.jSpinnerFitness.setEnabled(true);
        this.jButtonSave.setEnabled(true);
        this.jButtonAddToInitPop.setEnabled(true);
        this.jSpinnerFitness.getModel().setValue(gen.getFitness());
    }

    public void disableScore() {
        this.jButtonPlay.setEnabled(false);
        this.jButtonDelete.setEnabled(false);
        this.jButtonSaveFitness.setEnabled(false);
        this.jSpinnerFitness.setEnabled(false);
        this.jButtonSave.setEnabled(false);
        this.jButtonAddToInitPop.setEnabled(false);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jListInitPop = new javax.swing.JList();
        jPanel8 = new javax.swing.JPanel();
        jButtonInject = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jListPop = new javax.swing.JList();
        jPanel10 = new javax.swing.JPanel();
        jButtonCompose = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jButtonDelete = new javax.swing.JButton();
        jButtonPlay = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jSpinnerFitness = new javax.swing.JSpinner();
        jPanel12 = new javax.swing.JPanel();
        jButtonSaveFitness = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jButtonSave = new javax.swing.JButton();
        jButtonAddToInitPop = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jLabelStatus = new javax.swing.JLabel();
        jButtonStepBack = new javax.swing.JButton();
        jPanel14 = new javax.swing.JPanel();
        jButtonClose = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Composer");

        jPanel1.setLayout(new java.awt.GridLayout(1, 3));

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Population de départ"));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jListInitPop.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(jListInitPop);

        jPanel3.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jPanel8.setLayout(new java.awt.GridLayout(1, 1));

        jButtonInject.setText("Injecter sélection ->");
        jButtonInject.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonInjectActionPerformed(evt);
            }
        });
        jPanel8.add(jButtonInject);

        jPanel3.add(jPanel8, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jPanel3);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder("Population actuelle"));
        jPanel4.setLayout(new java.awt.BorderLayout());

        jListPop.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jListPop.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jListPopMouseClicked(evt);
            }
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jListPopMouseReleased(evt);
            }
        });
        jListPop.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jListPopKeyReleased(evt);
            }
        });
        jScrollPane2.setViewportView(jListPop);

        jPanel4.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jPanel10.setLayout(new java.awt.GridLayout(1, 0));

        jButtonCompose.setText("Composer");
        jButtonCompose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonComposeActionPerformed(evt);
            }
        });
        jPanel10.add(jButtonCompose);

        jPanel4.add(jPanel10, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jPanel4);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder("Propriétés de l'élément"));
        jPanel5.setLayout(new java.awt.BorderLayout());

        jButtonDelete.setText("Supprimer");
        jButtonDelete.setEnabled(false);
        jButtonDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonDeleteActionPerformed(evt);
            }
        });
        jPanel6.add(jButtonDelete);

        jButtonPlay.setText("Jouer");
        jButtonPlay.setEnabled(false);
        jButtonPlay.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonPlayActionPerformed(evt);
            }
        });
        jPanel6.add(jButtonPlay);

        jPanel5.add(jPanel6, java.awt.BorderLayout.NORTH);

        jPanel7.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel7.setLayout(new java.awt.BorderLayout());

        jLabel1.setText("Appréciation :");
        jPanel11.add(jLabel1);

        jSpinnerFitness.setModel(new javax.swing.SpinnerNumberModel(0.5d, 0.0d, 1.0d, 0.1d));
        jSpinnerFitness.setEnabled(false);
        jSpinnerFitness.setPreferredSize(new java.awt.Dimension(80, 20));
        jPanel11.add(jSpinnerFitness);

        jPanel7.add(jPanel11, java.awt.BorderLayout.NORTH);

        jButtonSaveFitness.setText("Enregistrer");
        jButtonSaveFitness.setEnabled(false);
        jButtonSaveFitness.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveFitnessActionPerformed(evt);
            }
        });
        jPanel12.add(jButtonSaveFitness);

        jPanel7.add(jPanel12, java.awt.BorderLayout.CENTER);

        jPanel5.add(jPanel7, java.awt.BorderLayout.CENTER);

        jPanel9.setLayout(new java.awt.GridLayout(2, 0));

        jButtonSave.setText("Sauvegarder sur disque");
        jButtonSave.setEnabled(false);
        jButtonSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonSaveActionPerformed(evt);
            }
        });
        jPanel9.add(jButtonSave);

        jButtonAddToInitPop.setText("Ajouter à pop. de départ");
        jButtonAddToInitPop.setEnabled(false);
        jButtonAddToInitPop.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonAddToInitPopActionPerformed(evt);
            }
        });
        jPanel9.add(jButtonAddToInitPop);

        jPanel5.add(jPanel9, java.awt.BorderLayout.SOUTH);

        jPanel1.add(jPanel5);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        jPanel2.setLayout(new java.awt.BorderLayout());

        jPanel13.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel13.setLayout(new java.awt.BorderLayout());

        jLabelStatus.setText("Etat : Prêt");
        jLabelStatus.setPreferredSize(new java.awt.Dimension(410, 30));
        jPanel13.add(jLabelStatus, java.awt.BorderLayout.WEST);

        jButtonStepBack.setText("Revenir en arrière");
        jButtonStepBack.setEnabled(false);
        jButtonStepBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonStepBackActionPerformed(evt);
            }
        });
        jPanel13.add(jButtonStepBack, java.awt.BorderLayout.EAST);

        jPanel2.add(jPanel13, java.awt.BorderLayout.PAGE_START);

        jButtonClose.setText("Fermer");
        jButtonClose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonCloseActionPerformed(evt);
            }
        });
        jPanel14.add(jButtonClose);

        jPanel2.add(jPanel14, java.awt.BorderLayout.PAGE_END);

        getContentPane().add(jPanel2, java.awt.BorderLayout.SOUTH);

        pack();
    }// </editor-fold>//GEN-END:initComponents

private void jButtonCloseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonCloseActionPerformed
    this.dispose();
}//GEN-LAST:event_jButtonCloseActionPerformed

private void jButtonInjectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonInjectActionPerformed
    if (!this.jListInitPop.isSelectionEmpty()) {
        DefaultListModel mod = (DefaultListModel) this.jListPop.getModel();
        MusicScore score = (MusicScore) this.jListInitPop.getSelectedValue();
        MusicGenome gen = new MusicGenome(score);
        gen.randomizeP();
        gen.setFitness(0.5);
        mod.addElement(gen);
    }
}//GEN-LAST:event_jButtonInjectActionPerformed

private void jListPopMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListPopMouseReleased
    if (!this.jListPop.isSelectionEmpty()) {
        MusicGenome gen = (MusicGenome) this.jListPop.getSelectedValue();
        this.showScore(gen);
    } else {
        this.disableScore();
    }
}//GEN-LAST:event_jListPopMouseReleased

private void jListPopKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jListPopKeyReleased
    this.jListPopMouseReleased(null);
}//GEN-LAST:event_jListPopKeyReleased

private void jButtonDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonDeleteActionPerformed
    DefaultListModel mod = (DefaultListModel) this.jListPop.getModel();
    if (!this.jListPop.isSelectionEmpty()) {
        mod.remove(this.jListPop.getSelectedIndex());
        this.jListPop.clearSelection();
        this.disableScore();
    }
}//GEN-LAST:event_jButtonDeleteActionPerformed

private void jButtonPlayActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonPlayActionPerformed
    if (!this.jListPop.isSelectionEmpty()) {
        MusicGenome gen = (MusicGenome) this.jListPop.getSelectedValue();
        try {
            ScorePlayer player = new ScorePlayer(gen, frm.getInstrument());
            player.start();
        } catch (InvalidMidiDataException ex) {
            JOptionPane.showMessageDialog(this, "Erreur due au système Midi : donnée (note) incorrecte.", "Attention", JOptionPane.WARNING_MESSAGE);
        } catch (MidiUnavailableException ex) {
            JOptionPane.showMessageDialog(this, "Erreur due au système Midi. Séquenceur indisponible. Contactez l'auteur du programme...", "Attention", JOptionPane.WARNING_MESSAGE);
        }
    }
}//GEN-LAST:event_jButtonPlayActionPerformed

private void jButtonSaveFitnessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveFitnessActionPerformed
    if (!this.jListPop.isSelectionEmpty()) {
        Double targetFitness = (Double) this.jSpinnerFitness.getModel().getValue();
        MusicGenome gen = (MusicGenome) this.jListPop.getSelectedValue();
        gen.setFitness(targetFitness);
    }
}//GEN-LAST:event_jButtonSaveFitnessActionPerformed

private void jButtonAddToInitPopActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonAddToInitPopActionPerformed
    if (!this.jListPop.isSelectionEmpty()) {
        MusicGenome gen = (MusicGenome) this.jListPop.getSelectedValue();
        MusicScore[] newPop = new MusicScore[initPop.length + 1];
        for (int x = 0; x < initPop.length; x++) {
            newPop[x] = initPop[x];
        }
        newPop[initPop.length] = gen;
        this.initPop = newPop;
        this.jListInitPop.setListData(initPop);
    }
}//GEN-LAST:event_jButtonAddToInitPopActionPerformed

private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonSaveActionPerformed
    if (!this.jListPop.isSelectionEmpty()) {
        MusicGenome gen = (MusicGenome) this.jListPop.getSelectedValue();
        File curDir = new File(this.frm.getWorkingDir().getPath() + File.separator + "extrait.xml");
        int iter = 1;
        while (true) {
            curDir = new File(this.frm.getWorkingDir().getPath() + File.separator + "extrait_" + iter + ".xml");
            if (!curDir.exists()) {
                break;
            }
            iter++;
        }
        String resp = JOptionPane.showInputDialog(this, "Veuillez saisir le nom du fichier à créer (en terminant par .xml).\nIl apparaîtra ensuite dans la liste des fichiers d'analyse.", curDir.getName());
        if (resp != null && !resp.isEmpty()) {
            // Vérifier si le fichier existe :
            File fil = new File(this.frm.getWorkingDir().getPath() + File.separator + resp);
            curDir = null;
            if (fil.exists()) {
                int respo = JOptionPane.showConfirmDialog(this, "Le fichier XML cible de l'analyse existe déjà.\nVoulez-vous l'écraser ?\nCliquez sur non pour annuler l'analyse.", "Fichier d'analyse existant", JOptionPane.YES_NO_OPTION);
                if (respo == JOptionPane.NO_OPTION) {
                    return;
                }
            }
            // Créer le fichier, avec une liste de notes vide.
            gen.setFil(fil);
            try {
                gen.notesToXML(120, "not created from recording");
                this.frm.fillAnalList();
                JOptionPane.showMessageDialog(this, "Fichier " + fil.getName() + " créé.", "Fichier créé", JOptionPane.INFORMATION_MESSAGE);
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "Fichier inutilisable... Veuillez réessayer avec un autre nom de fichier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Erreur d'entrée sortie à l'écriture du fichier.\nVeuillez réessayer, éventuellement avec un autre nom de fichier.", "Erreur", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    }
}//GEN-LAST:event_jButtonSaveActionPerformed

private void jButtonComposeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonComposeActionPerformed
    // Le vif du problème...
    if (this.jListPop.getModel().getSize() < 2) {
        JOptionPane.showMessageDialog(this, "Il vous faut plus que deux éléments pour produire une descendance musicale.\nAjoutez plus d'extraits à la population actuelle.", "Attention", JOptionPane.WARNING_MESSAGE);
        return;
    }
    // Si des fitness sont à 0, faut le signaler...
    DefaultListModel mod = (DefaultListModel) this.jListPop.getModel();
    this.jLabelStatus.setText("Etat : Evolution en cours...");
    this.paint(this.getGraphics());
    eco.getPop().clear();
    boolean warn = false;
    this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
    for (int x = 0; x < mod.size(); x++) {
        MusicGenome gen = (MusicGenome) mod.get(x);
        if (!warn && gen.getFitness() == 0) {
            warn = true;
            int respo = JOptionPane.showConfirmDialog(this, "Au moins un de ces extraits a une appréciation nulle.\nCes éléments ne participent jamais à la reproduction.\nEtes-vous sur d'avoir donné une appréciation à chaque extrait ?", "Fichier d'analyse existant", JOptionPane.YES_NO_OPTION);
            if (respo == JOptionPane.NO_OPTION) {
                this.setCursor(Cursor.getDefaultCursor());
                this.jLabelStatus.setText("Etat : Prêt, génération " + eco.getGeneration());
                return;
            }
        }
        eco.getPop().add((MusicGenome)mod.get(x));
    }
    eco.advanceOneGeneration();
    mod.clear();
    for (int x = 0; x < eco.getPop().size(); x++) {
        mod.addElement(eco.getPop().get(x));
    }
    this.jButtonStepBack.setEnabled(true);
    this.jLabelStatus.setText("Etat : Prêt, génération " + eco.getGeneration());
    this.setCursor(Cursor.getDefaultCursor());
}//GEN-LAST:event_jButtonComposeActionPerformed

private void jButtonStepBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonStepBackActionPerformed
    this.jButtonStepBack.setEnabled(false);
    eco.stepBack();
    DefaultListModel mod = (DefaultListModel) this.jListPop.getModel();
    mod.clear();
    for (int x = 0; x < eco.getPop().size(); x++) {
        mod.addElement(eco.getPop().get(x));
    }
    this.jLabelStatus.setText("Etat : Prêt, génération " + eco.getGeneration() + " " + eco.getPop().size() + " individus");
}//GEN-LAST:event_jButtonStepBackActionPerformed

private void jListPopMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jListPopMouseClicked
    if (evt.getClickCount() >= 2) {
        this.jButtonPlayActionPerformed(null);
    }
}//GEN-LAST:event_jListPopMouseClicked

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonAddToInitPop;
    private javax.swing.JButton jButtonClose;
    private javax.swing.JButton jButtonCompose;
    private javax.swing.JButton jButtonDelete;
    private javax.swing.JButton jButtonInject;
    private javax.swing.JButton jButtonPlay;
    private javax.swing.JButton jButtonSave;
    private javax.swing.JButton jButtonSaveFitness;
    private javax.swing.JButton jButtonStepBack;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabelStatus;
    private javax.swing.JList jListInitPop;
    private javax.swing.JList jListPop;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSpinner jSpinnerFitness;
    // End of variables declaration//GEN-END:variables
}
